import * as THREE from "three";
import MovingParticles from "./MovingParticles.js";
import { makeLogger } from "../logging/Logger";

const log = makeLogger("TrainingSimulation");

export default class TrainingSimulation {
  static start(stage, i, loopParticles = false) {
    log("creating a moving particle object");

    // coordinates are: [ x1, y1, x2, y2, x3, y3, ..., xN, yN ]
    const paths = {
      nodes: 29,
      components: 2,
      count: 8,
      coordinates: [
        496,
        600,
        580,
        600,
        660,
        600,
        764,
        604,
        768,
        504,
        852,
        500,
        924,
        500,
        924,
        596,
        1004,
        596,
        1096,
        600,
        1188,
        600,
        1284,
        600,
        1384,
        600,
        1480,
        600,
        1556,
        600,
        1624,
        600,
        1628,
        524,
        1632,
        452,
        1632,
        364,
        1632,
        288,
        1724,
        280,
        1816,
        284,
        1908,
        284,
        1996,
        284,
        2092,
        284,
        2180,
        280,
        2324,
        284,
        2436,
        284,
        2556,
        288,
        496,
        600,
        580,
        600,
        660,
        600,
        764,
        604,
        768,
        504,
        852,
        500,
        924,
        500,
        924,
        596,
        1004,
        596,
        1148,
        596,
        1148,
        508,
        1156,
        388,
        1256,
        392,
        1352,
        392,
        1448,
        392,
        1544,
        392,
        1648,
        392,
        1744,
        392,
        1840,
        392,
        1932,
        392,
        2024,
        392,
        2116,
        392,
        2300,
        396,
        2452,
        404,
        2572,
        396,
        2572,
        396,
        2572,
        396,
        2572,
        396,
        2572,
        396,
        496,
        600,
        580,
        600,
        660,
        600,
        764,
        604,
        768,
        504,
        852,
        500,
        952,
        500,
        1036,
        496,
        1120,
        500,
        1204,
        500,
        1292,
        496,
        1376,
        496,
        1464,
        496,
        1556,
        496,
        1656,
        496,
        1748,
        496,
        1844,
        496,
        1924,
        496,
        2008,
        496,
        2096,
        496,
        2188,
        496,
        2324,
        496,
        2456,
        496,
        2576,
        500,
        2576,
        500,
        2576,
        500,
        2576,
        500,
        2576,
        500,
        2576,
        500,
        496,
        600,
        580,
        600,
        660,
        600,
        764,
        604,
        768,
        504,
        852,
        500,
        924,
        500,
        924,
        596,
        1004,
        596,
        1096,
        600,
        1188,
        600,
        1284,
        600,
        1384,
        600,
        1480,
        600,
        1556,
        600,
        1624,
        600,
        1632,
        704,
        1736,
        708,
        1740,
        604,
        1832,
        604,
        1912,
        604,
        2012,
        604,
        2112,
        604,
        2216,
        604,
        2344,
        612,
        2472,
        616,
        2572,
        612,
        2572,
        612,
        2572,
        612,
        496,
        600,
        580,
        600,
        660,
        600,
        764,
        604,
        764,
        716,
        860,
        716,
        964,
        712,
        1064,
        712,
        1156,
        712,
        1256,
        708,
        1344,
        708,
        1424,
        712,
        1420,
        816,
        1516,
        816,
        1620,
        816,
        1716,
        820,
        1820,
        820,
        1912,
        816,
        2000,
        820,
        2104,
        816,
        2232,
        824,
        2352,
        832,
        2468,
        832,
        2580,
        828,
        2580,
        828,
        2580,
        828,
        2580,
        828,
        2580,
        828,
        2580,
        828,
        496,
        600,
        580,
        600,
        660,
        600,
        764,
        604,
        768,
        504,
        852,
        500,
        924,
        500,
        924,
        596,
        1004,
        596,
        1096,
        600,
        1188,
        600,
        1284,
        600,
        1384,
        600,
        1480,
        600,
        1556,
        600,
        1624,
        600,
        1632,
        704,
        1736,
        708,
        1828,
        712,
        1936,
        716,
        2040,
        716,
        2132,
        720,
        2232,
        716,
        2356,
        736,
        2472,
        732,
        2548,
        724,
        2548,
        724,
        2548,
        724,
        2548,
        724,
        496,
        600,
        580,
        600,
        660,
        600,
        764,
        604,
        764,
        716,
        860,
        716,
        964,
        712,
        964,
        816,
        1076,
        820,
        1204,
        820,
        1204,
        928,
        1296,
        928,
        1404,
        928,
        1500,
        928,
        1612,
        928,
        1720,
        928,
        1832,
        928,
        1940,
        928,
        2048,
        928,
        2156,
        928,
        2260,
        924,
        2368,
        936,
        2488,
        940,
        2584,
        936,
        2584,
        936,
        2584,
        936,
        2584,
        936,
        2584,
        936,
        2584,
        936,
        496,
        600,
        580,
        600,
        660,
        600,
        764,
        604,
        764,
        716,
        860,
        716,
        964,
        712,
        964,
        816,
        1076,
        820,
        1204,
        820,
        1316,
        820,
        1420,
        816,
        1516,
        816,
        1524,
        928,
        1524,
        1028,
        1628,
        1032,
        1728,
        1032,
        1828,
        1040,
        1932,
        1040,
        2044,
        1028,
        2156,
        1032,
        2280,
        1036,
        2380,
        1040,
        2552,
        1044,
        2552,
        1044,
        2552,
        1044,
        2552,
        1044,
        2552,
        1044,
        2552,
        1044
      ]
    };

    // const color = new THREE.Color(Math.random(), Math.random(), Math.random());
    const color = new THREE.Color(1, 1, 0);

    const distributions = [
      [1 / 8, 1 / 8, 1 / 8, 1 / 8, 1 / 8, 1 / 8, 1 / 8, 1 / 8],
      [1.9 / 16, 2 / 16, 0.1 / 16, 4 / 16, 4 / 16, 0.1 / 16, 2 / 16, 1.9 / 16],
      [
        0.1 / 16,
        1 / 16,
        0.1 / 16,
        5 / 15.6,
        9 / 16,
        0.1 / 16,
        0.1 / 16,
        1 / 16
      ],
      [
        0.1 / 16,
        0.1 / 16,
        0.1 / 16,
        0.1 / 16,
        15.3 / 16,
        0.1 / 16,
        0.1 / 16,
        0.1 / 16
      ]
    ];

    const mp = new MovingParticles({
      stage,
      paths,
      probability: distributions[i],
      color,
      speed: 0.0035,
      pointCount: 3000,
      pointSize: 7,
      image: undefined,
      loopParticles
    });
    stage._registerActor(mp);
    mp.onComplete(mp => stage._unregisterActor(mp));

    return new Promise((resolve, reject) => {
      mp.onComplete(resolve);
    });
  }
}
